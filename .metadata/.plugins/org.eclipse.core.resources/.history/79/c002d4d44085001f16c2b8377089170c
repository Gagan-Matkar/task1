package com.example.Csv_extractor;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertNotNull;
import static org.testng.Assert.assertTrue;
import static org.testng.Assert.fail;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.testng.*;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class AppTest {

	public static Connection testConnection;
    private final String csvFileName = "testUsers.csv"; // Name for the CSV file


	@BeforeClass
	public static void setUp() throws SQLException {

		String h2Url = "jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1";
        testConnection = DriverManager.getConnection(h2Url, "sa", "");
		try (Statement stmt = testConnection.createStatement()) {
			String createTableSQL = "CREATE TABLE demo_acc (account_id VARCHAR(255) PRIMARY KEY, account_login VARCHAR(255), account_status VARCHAR(255), meta_type VARCHAR(255));";

			stmt.execute(createTableSQL);
		}
		App.setConnection(testConnection);

	}

	@AfterClass
	public static void exit() throws SQLException {
		if (testConnection != null && !testConnection.isClosed()) {
			testConnection.close();
		}
	}

	@Test
	public void testConnection() throws SQLException {
		assertNotNull(testConnection, "database connection should not be null");
		assertTrue(testConnection.isClosed(), "database connection should be not be closed ");
	}

	

	@Test
	public void testCloseConnection() {
		try {
			if (!testConnection.isClosed()) {
				testConnection.close();
			}
			assertTrue(testConnection.isClosed(), "Connection should be closed.");
		} catch (SQLException e) {
			fail("Exception occurred while closing the connection: " + e.getMessage());
		}
	}
	
	@Test
    public void testWriteUsersToCsv() throws SQLException, IOException {
        // Step 1: Add some test data to the in-memory database
        String account_id = "12345";
        String account_login = "testUser";
        String account_status = "active";
        String meta_type = "basic";

        app.createUser(account_id, account_login, account_status, meta_type); // Assuming this method is available

        // Step 2: Call the method under test
        app.writeUsersToCsv(csvFileName);

        // Step 3: Read the generated CSV file and verify its contents
        StringBuilder csvContents = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(csvFileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                csvContents.append(line).append("\n");
            }
        }

        String expectedHeader = "Account Id,Account Login,Status,$metaType\n";
        String expectedRow = "12345,testUser,active,basic\n";
        String expectedContents = expectedHeader + expectedRow;

        assertEquals(csvContents.toString().trim(), expectedContents.trim(), "CSV contents do not match expected output.");
    }

	
	
	
	

	


}
